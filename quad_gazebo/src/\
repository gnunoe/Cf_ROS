#include "ros/ros.h"
#include "quad_gazebo/trajectory.h"
#include "std_msgs/String.h"

#include <stdlib.h>
#include <stdio.h>
#include <cstdlib>
#include <boost/lexical_cast.hpp>

#include "sparseRRT/sparse_search.h"

/*
void publish_temp(double value)
{
  ros::init(argc,argv, "pub")
  ros::NodeHandle n;
  ros::Publisher pub2 = n.advertise<prueba_1::temperature>("temperatura",1000);
  pub2.publish(value);
}

*/


static void show_usage()
{
  std::cerr << "\n"
            << "Usage: trajectory_client <name_of_trajectory> <args> \n"
            << "\n"
            << "Closed loop trajectories: \n"
	    << "\t Example: trajectory_client <name of trajectory>\n"
            << "\t\t Supported trajectories: circle, lissajous\n"
 	    << "\n"
            << "Open loop trajectories with Sparse-SST planner: \n"
	    << "\t OPTION 1: build a new tree from scratch\n"
            << "\t Example: trajectory_client sparse -m <map name> -optional args <arg name>\n"
            << "\t Mandatory arguments:\n"
            << "\t -m,\t\t Map name <map> (Supported: Map1, Map2, Map3, Map4)\n"
            << "\t Optional arguments:\n"
            << "\t -t,\t\t Iteration time <time> (Default = 30s)\n"
            << "\t -goal\t         Goal position <X Y Z> (Default = <-2 -2 1>)\n"
            << "\n"
	    << "\t OPTION 2: search in the tree the best path between nodes (nead quad_sst_service running)\n"
	    << "\t Example: trajectory_client sparse_search -g <goal>\n"
	    << "\t -goal\t         Goal position <X Y Z>\n"
            << "--------------------------------\n"
            << "To show this help message: trajectory_client -h\n"
            << std::endl;
}

int main(int argc, char **argv)
{
  std::string traj_type;
  std::string map_opt;
  std::string sparse_map;

  //Start the ros node
  ros::init(argc, argv, "trajectory_client");

  //////////////////////////////////////////
  // Check arguments for all the planners //
  //////////////////////////////////////////

  //show help
  if (argc == 2)
  {
   std::string help = argv[1];
   if (help == "-h")
   {
     show_usage();
     return 1;
   }
  }

  //Not enough arguments
  if (argc < 2)
  {
    show_usage();
    return 1; 
  }
  traj_type = argv[1];

  if (traj_type != "circle" &&
      traj_type != "sparse" &&
      traj_type != "ompl"   &&
      traj_type != "sparse_search")
  {
    ROS_ERROR_STREAM("Wrong trajectory or planner name, please try again");
    return 1;
  }

  //////////////////////////////////////////
  //  Check arguments for SPARSE planner  //
  //////////////////////////////////////////

  bool check_sparse_optional = false;
  //Mandatory Options for Sparse trajectory 
  if (traj_type == "sparse") 
  {
    if (argc<4)
    {  
      ROS_ERROR_STREAM("Wrong number arguments, do you forget to add the mandatory argumetn -m <map name>?");
      show_usage();
      return 1; 
    }
    else
    {
      map_opt = argv[2];
      sparse_map = argv[3];
    
      if (map_opt == "-m")
      {
        if (sparse_map != "Map1" &&
            sparse_map != "Map2" &&
            sparse_map != "Map3" &&
            sparse_map != "Map4")
        {
          ROS_ERROR_STREAM("Unsupported map, please use one of the supported maps: Map1, Map2, Map3, Map4");
          return 1;
        }
        //mandatory argument was correct, let's check the optional
	check_sparse_optional = true;
      }
      else
      {
        ROS_ERROR_STREAM("Please check -m is well written");
        return 1;
      }
    }
  }
  //Optional Arguments for Sparse Trajectory
  bool time_flag = false;
  int index_time = 0;
  int sparse_time = 30;  

  bool goal_flag = false;
  int index_goal = 0;
  double sparse_goal[3] = {-2.0,-2.0,1.0};
  
  if (check_sparse_optional)
  {
  //Check the arguments used by the user
  std::string sparse_opt;
  if (argc>4)
  {
    int i=4;
    //for (int i=4;i<argc;i++)
    while (i<argc)
    {
      sparse_opt = argv[i];

      //Check time option
      if (sparse_opt == "-t")
      {
        time_flag = true;
        i ++;
        index_time = i;
      }

      //Check goal option
      if (sparse_opt == "-goal")
      {
        goal_flag = true;
        i++;
        index_goal = i;
        i++;
        i++;
      }

     i++;
    }
    if (!time_flag && !goal_flag)
    {
      ROS_ERROR_STREAM("Invalid argument, please use -h to see posible arguments");
      return 1;
    }
  }

  //Check validity of time option
  if (time_flag)
  {
    if (index_time < argc)
    {
      sparse_time = atoi(argv[index_time]);
      if (sparse_time <30)
      {
        ROS_ERROR_STREAM("<iteration_time> should be equal or greater than 30");
        return 1;
      }
      else
      {
        ROS_INFO_STREAM("<iteration time> changed to: " << sparse_time << " seconds");
      }
    }
    else
    {
      ROS_ERROR_STREAM("Argument -t <iteration time> was written wrong, please check it");
      return 1;
    }
  }

  if (goal_flag)
  {
    if (index_goal+2 < argc)
    {
      sparse_goal[0] = atof(argv[index_goal]);
      sparse_goal[1] = atof(argv[index_goal+1]);
      sparse_goal[2] = atof(argv[index_goal+2]);

      if (abs(sparse_goal[0])>2.5 | abs(sparse_goal[1]>3) |
          sparse_goal[2]<0.5 | sparse_goal[2]>1.5)
      {
        ROS_ERROR_STREAM("Mocap limits exceeded");
        ROS_ERROR_STREAM("X-->   -2.5 < X < 2.5");
        ROS_ERROR_STREAM("Y-->   -3.0 < Y < 3.0");
        ROS_ERROR_STREAM("Z-->    0.5 < X < 1.5");
        return 1;
      }
      else
      {
        ROS_INFO_STREAM("<goal> changed to: X= " << sparse_goal[0] 
                                      << ", Y= " << sparse_goal[1] 
                                      << ", Z= " << sparse_goal[2]);
      }
    }
    else
    {
      ROS_ERROR_STREAM("Argument -goal <x y z> was written wrong, please check it");
      return 1;
    }
  }
  }

  
  //////////////////////////////////////////
  //  Check arguments for sparse_search   //
  //////////////////////////////////////////
  std::string goal_opt_search;
  double goal_search[3]={0,0,0};
  
  if (traj_type == "sparse_search")
  {
    if (argc!=6)
    {
      ROS_ERROR_STREAM("Wrong number arguments, do you forget to add the mandatory argument -g <X Y Z>?");
      show_usage();
      return 1;
    }
    else
    {
      goal_opt_search = argv[2];
      
      goal_search[0] = atof(argv[3]);
      goal_search[1] = atof(argv[4]);
      goal_search[2] = atof(argv[5]);

      if (goal_opt_search == "-g")
      {
        ROS_INFO_STREAM("Calling the sparse tree server, pease wait...");
      }
      else
      {
        ROS_ERROR_STREAM("Please check -g is well written");
        return 1;
      }
    }

  }


  //////////////////////////////////////////
  //  Check arguments for OMPL planners   //
  //////////////////////////////////////////
  if (traj_type == "ompl")
  {
    ROS_INFO_STREAM("OMPL trajectory received, sending it to the controller...");
  }



  //Crear hilos con NodeHandle.
  ros::NodeHandle n;

  //Creamos objeto del tipo Cliente, a traves de la llamada a la
  //funcion serviceClient([nombre de la comunicacion])
  ros::ServiceClient traj_client = n.serviceClient<quad_gazebo::trajectory>("trajectory_message");
  ros::ServiceClient sparse_search_client = n.serviceClient<sparseRRT::sparse_search>("sparse_tree_search");  

  //Instanciamos una clase Servicio, y asignamos valores a Request
  quad_gazebo::trajectory srv;
  sparseRRT::sparse_search srv_search;

  ros::Duration(5).sleep();

  //For sparse trajectories made from scratch 
  if (traj_type == "sparse")
  {
    //Execute sparse planner with map as arg
    ROS_INFO_STREAM("Launching sparse planner");
    n.setParam("available_sparse_traj_scratch", 0);
    //std::string time = boost::lexical_cast<std::string>(sparse_time);
    std::string command = "roslaunch sparseRRT quad_sst.launch map:=" + sparse_map + 
		          " time:=" + boost::lexical_cast<std::string>(sparse_time) +
                          " goalX:=" + boost::lexical_cast<std::string>(sparse_goal[0]) + 
 			  " goalY:=" + boost::lexical_cast<std::string>(sparse_goal[1]) + 
                          " goalZ:=" + boost::lexical_cast<std::string>(sparse_goal[2]);

    //std::cout << command << "\n";
    //command.append(sparse_time);
    system(command.c_str());

    //When return from the planner, we check
    // the parameter available_sparse_traj:
    //   1 --> planner found path
    //   2 --> planner did not found path
    int param_t;
    n.getParam("available_sparse_traj_scratch", param_t);
    if (param_t == 1)
    {
      ROS_INFO_STREAM("Path found, connecting with the server...");
    }     
    else if (param_t == 2)
    {
      ROS_ERROR_STREAM("Path not found, closing client");
      return 1;
    }
    else
    {
      ROS_ERROR_STREAM("Error with parameter, closing client...");
      return 1;
    }
  }


  //For sparse trajectories built from an existing tree
  if (traj_type =="sparse_search")
  {
    int param_service;
    n.getParam("available_sparse_service", param_service);
    if (param_service==1)
    {
      srv_search.request.x_s = -2;
      srv_search.request.y_s = -2;
      srv_search.request.z_s =  1;
      srv_search.request.x_g = goal_search[0];
      srv_search.request.y_g = goal_search[1];
      srv_search.request.z_g = goal_search[2];
      if(sparse_search_client.call(srv_search))
      {
        switch(srv_search.response.done)
        {
          case 1: ROS_INFO_STREAM("Path found, calling the server...");
	          break;
	  case 2: ROS_ERROR_STREAM("The start point given collide with an obstacle. Please select another point");
		  return 1;
 	  case 3: ROS_ERROR_STREAM("The goal point given collide with an obstacle. Please select another point");
		  return 1;
          case 4: ROS_ERROR_STREAM("Path not found, closing client...");
                  return 1;
	  default:ROS_ERROR_STREAM("Unnespecified error, closing the client...");
		  return 1;
        }
 
        ros::spinOnce();
      }
      else
      {
        ROS_ERROR_STREAM("Connecting problems with the server");
        return 1;
      }
    }
    else
    {
      ROS_ERROR_STREAM("Unable to reach the server.");
      ROS_ERROR_STREAM("Check if the process is alive and if the tree has been built succesfully");
      return 1;
    }
  }


  srv.request.name = traj_type;
  
  //Comprobamos el buen funcionamiento de la conexion
  if(traj_client.call(srv))
  {
    //ROS_INFO("Result: %f", (float)srv.response.test_out);
    ROS_INFO_STREAM("Planning "<< srv.response.done);    
    
    ros::spinOnce();
  }

  else
  {
    ROS_ERROR_STREAM("Unable to reach the server, closing client...");
    return 1;
  }

  return 0;

}

