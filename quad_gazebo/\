#include "ros/ros.h"
#include "quad_gazebo/trajectory.h"
#include "std_msgs/String.h"

#include <stdlib.h>
#include <stdio.h>
#include <cstdlib>


/*
void publish_temp(double value)
{
  ros::init(argc,argv, "pub")
  ros::NodeHandle n;
  ros::Publisher pub2 = n.advertise<prueba_1::temperature>("temperatura",1000);
  pub2.publish(value);
}

*/


static void show_usage()
{
  std::cerr << "Usage: trajectory_client <name_of_trajectory> <args> \n"
            << "\n"
            << "Closed loop trajectories: \n"
	    << "\t Example: trajectory_client <name of trajectory>\n"
            << "\t\t Supported trajectories: circle, lissajous\n"
 	    << "\n"
            << "Open loop trajectories with Sparse-SST planner: \n"
            << "\t Example: trajectory_client <name of trajectory> -m <map name> -args <arg name>\n"
            << "Mandatory arguments:\n"
            << "\t-m,\t\t Map name (Supported: Map1, Map2)\n"
            << "\t-t,\t\t Iteration time (Default = 30s)\n"
            << std::endl;
}

int main(int argc, char **argv)
{
  std::string traj_type;
  std::string sparse_map;
  int sparse_time = 30;

  //Iniciamos el cliente
  ros::init(argc, argv, "trajectory_client");

  //Not enough arguments
  if (argc < 2)
  {
    show_usage();
    return 1; 
  }
  traj_type = argv[1];

  if (traj_type == "sparse")
  {
  if (argc <4)
  {
    show_usage();
    return 1; 
  }
  else
  {
    for (int i=2; i<argc; i++)
    {
      if (i+1 != argc)
      {
        if (argv[i] == "-m")
        {
          sparse_map = argv[i+1];
          if (sparse_map != "Map1" &&
              sparse_map != "Map2")
          {
            ROS_ERROR_STREAM("Unsupported Map. Please choose supported maps: Map1 Map2");
            return 1;
          }
        }
        else if (argv[i] == "-t")
        {
          sparse_time = atoi(argv[i+1]);
          if (sparse_time <=0)
          {
            ROS_ERROR_STREAM("Time should be greater than 30 s, and can't be negative");
            return 1;
          }
        }
        else
        {
          ROS_ERROR_STREAM("wrong output");
          return 1;
        }
      }
    }
  }
  }
    /*
    if (argc !=3)
    {
      ROS_INFO_STREAM("Usage with sparse: trajectory_client sparse <map>");
      return 1;
    }
    sparse_map = argv[2];
    if (sparse_map != "Map1" && sparse_map != "Map2")
    {
      ROS_ERROR_STREAM("Unsupported Map. Please choose supported maps: Map1 Map2");
      return 1;
    }
    */
  

  //Crear hilos con NodeHandle.
  ros::NodeHandle n;

  //Creamos objeto del tipo Cliente, a traves de la llamada a la
  //funcion serviceClient([nombre de la comunicacion])
  ros::ServiceClient traj_client = n.serviceClient<quad_gazebo::trajectory>("trajectory_message");
  
  //Instanciamos una clase Servicio, y asignamos valores a Request
  quad_gazebo::trajectory srv;

  ros::Duration(5).sleep();
 
  if (traj_type == "sparse")
  {
    //Execute sparse planner with map as arg
    ROS_INFO_STREAM("Launching sparse planner");
    n.setParam("available_traj", 0);
    std::string command = "roslaunch sparseRRT quad_sst.launch map:=";
    command.append(sparse_map);
    system(command.c_str());

    //When return from the planner, we check
    // the parameter available_traj:
    //   1 --> planner found path
    //   2 --> planner did not found path
    int param_t;
    n.getParam("available_traj", param_t);
    if (param_t == 1)
    {
      ROS_INFO_STREAM("Path found, connecting with the server...");
    }     
    else if (param_t == 2)
    {
      ROS_ERROR_STREAM("Path not found, closing client");
      return 1;
    }
    else
    {
      ROS_ERROR_STREAM("Error with parameter, closing client...");
      return 1;
    }
  }

  srv.request.name = argv[1];//atoll(argv[1]);
  
  //Comprobamos el buen funcionamiento de la conexion
  if(traj_client.call(srv))
  {
    //ROS_INFO("Result: %f", (float)srv.response.test_out);
    ROS_INFO_STREAM("Planning done "<< srv.response.done);    

    //publish_temp(srv.response.centigrade);
    
    //Publicar temperatura
/*    ros::Publisher pub = n.advertise<prueba_1::temperature>("temperatura",1000);
    
    double tempe = srv.response.centigrade;

    pub.publish(tempe); */
    
    ros::spinOnce();
  }

  else
  {
    ROS_ERROR_STREAM("Unable to reach the server, closing client...");
    return 1;
  }

  return 0;

}

